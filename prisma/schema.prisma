generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Car {
  id                       String                 @id @default(uuid())
  name                     String
  brand                    String
  model                    String
  year                     Int
  mileage                  Int
  fuelType                 String
  gearboxType              String
  bodyType                 String
  engineDisplacement       Int
  horsePower               Int
  VIN                      String                 @unique
  version                  String
  generation               String
  doorsAmount              Int
  seatsAmount              Int
  color                    String
  colorType                String
  drivetrain               String
  CO2Emission              String
  cityFuelConsumption      String
  outOfCityFuelConsumption String
  countryOfOrigin          String
  hasRegistrationNumber    String
  registeredInPoland       String
  driverPlateNumber        String                 @unique
  firstRegistrationDate    String
  isFirstOwner             String
  servicedInASO            String
  priceInCents             Int
  isNew                    String
  canNegotiate             String
  description              String
  filePath                 String
  imagePath                String
  isAvailableForPurchase   Boolean                @default(true)
  createdAt                DateTime               @default(now())
  updatedAt                DateTime               @updatedAt
  Order                    Order[]
  downloadVerifications    DownloadVerification[]

  comfortList            ComfortList[]
  safetyList             SafetyList[]
  audioAndMultimediaList AudioAndMultimediaList[]
  otherList              OtherList[]

  seller Seller[]
}

model ComfortList {
  id         Int    @id @default(autoincrement())
  optionName String
  carId      String
  car        Car    @relation(fields: [carId], references: [id], onDelete: Cascade)
}

model SafetyList {
  id         Int    @id @default(autoincrement())
  optionName String
  carId      String
  car        Car    @relation(fields: [carId], references: [id], onDelete: Cascade)
}

model AudioAndMultimediaList {
  id         Int    @id @default(autoincrement())
  optionName String
  carId      String
  car        Car    @relation(fields: [carId], references: [id], onDelete: Cascade)
}

model OtherList {
  id         Int    @id @default(autoincrement())
  optionName String
  carId      String
  car        Car    @relation(fields: [carId], references: [id], onDelete: Cascade)
}

model Seller {
  id          String   @id @default(uuid())
  name        String
  surname     String
  phoneNumber String
  email       String
  country     String
  postalCode  String
  city        String
  street      String
  houseNumber String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  carId      String
  car         Car      @relation(fields: [carId], references: [id], onDelete: Cascade)
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
}

model Order {
  id               String   @id @default(uuid())
  pricePaidInCents Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  userId String
  carId  String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  car    Car    @relation(fields: [carId], references: [id], onDelete: Restrict)
}

model DownloadVerification {
  id        String   @id @default(uuid())
  expiresAt DateTime
  createdAt DateTime @default(now())
  carId     String
  car       Car      @relation(fields: [carId], references: [id], onDelete: Cascade)
}
